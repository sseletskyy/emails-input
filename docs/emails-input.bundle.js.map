{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/emails-input/email-node.ts","webpack:///./src/emails-input/emails-input.ts","webpack:///./src/emails-input/input-node.ts","webpack:///./src/emails-input/polyfills.ts","webpack:///./src/emails-input/utils.ts"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,4DAAa;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;;;;;;;;;;;;;AChDP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAoC;AACK;AACA;AACgB;AACzD,0DAAS,GAAG;AACZ;AACO;AACA;AACA;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,qDAAS;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,qDAAS;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qDAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,8DAAe;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,qDAAS;AAC9B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,kCAAkC,EAAE;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,qDAAS;AAC9B;AACA;AACA;AACA,SAAS;AACT;AACA,yBAAyB,qDAAS;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,oDAAa;AACnC;AACA;AACA;AACA;;;;;;;;;;;;;AC3JA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;;;;;;;;;;;;;ACZP;AAAA;AAAe;AACf;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACZA;AAAA;AAAA;AAAA,8CAA8C,EAAE;AAChD;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL","file":"emails-input.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/emails-input/emails-input.ts\");\n","import { validateEmail } from './utils';\nvar EmailNodeFn = function () {\n    var _validateString = function (email) {\n        if (typeof email !== 'string') {\n            throw new Error('EmailNode : create method expects a string as an argument');\n        }\n    };\n    /**\n     * generates a new html element\n     * parent component should be responsible for appending to DOM\n     * and adding event listeners\n     * returns an object with keys div: HTMLDivElement, email: string\n     * email can be used in parent component to update the email list\n     */\n    var create = function (email) {\n        // TODO optimise creation with a template to be cloned\n        _validateString(email);\n        // remove trailing comma\n        var noEndingComma = email.split(',')[0];\n        var div = document.createElement('div');\n        var t = document.createTextNode(noEndingComma);\n        div.appendChild(t);\n        // check email and decide which css class to use\n        var isValid = validateEmail(noEndingComma);\n        var stateClass = isValid ? 'email--state-valid' : 'email--state-invalid';\n        div.className = \"email \" + stateClass;\n        // set data attributes for re-usage\n        div.setAttribute('data-email', noEndingComma);\n        div.setAttribute('data-valid', String(isValid));\n        var span = document.createElement('span');\n        span.innerHTML = '&#10005';\n        span.className = 'delete';\n        div.appendChild(span);\n        return { div: div, email: noEndingComma };\n    };\n    /**\n     * helps to check if clicked element is indeed a delete btn (<span> X </span>)\n     * is used in the parent component, cause parent is responsible for handling events\n     */\n    var isDeleteButton = function (target) {\n        return target.tagName.toLowerCase() === 'span' &&\n            target.classList.contains('delete');\n    };\n    return {\n        create: create,\n        isDeleteButton: isDeleteButton,\n    };\n};\nexport var EmailNode = EmailNodeFn();\n","import polyfills from './polyfills';\nimport { EmailNode } from './email-node';\nimport { InputNode } from './input-node';\nimport { parsePastedText, validateEmail } from './utils';\npolyfills(); // support IE11\n// custom events\nexport var COMPLETE_INPUT = 'emails-input--complete-input-node';\nexport var DELETE_EMAIL_NODE = 'emails-input--delete-email-node';\nexport function EmailsInput(containerNode) {\n    var emailList;\n    var _constructor = function () {\n        emailList = [];\n        _addInputNode();\n        _setEventListeners();\n    };\n    var _addInputNode = function () {\n        containerNode.appendChild(InputNode.create());\n    };\n    var getEmails = function () {\n        // return a cloned array, no way to impact on the list outside\n        return Array.from(emailList);\n    };\n    var _dispatchCompleteInput = function (target) {\n        var customEvent = new CustomEvent(COMPLETE_INPUT, {\n            bubbles: true,\n        });\n        return target.dispatchEvent(customEvent);\n    };\n    var _dispatchDeleteEmailNode = function (event) {\n        var targetSpan = event.target;\n        var customEvent = new CustomEvent(DELETE_EMAIL_NODE, {\n            bubbles: true,\n        });\n        return targetSpan.dispatchEvent(customEvent);\n    };\n    // this is a listener of the custom event COMPLETE_INPUT\n    var _convertInputToNode = function (event) {\n        // console.log('CustomEventListener :: ', event);\n        var target = event.target;\n        var email = target.value.replace(/,/g, '');\n        // early return if email is empty or just comma\n        if (!email) {\n            // do nothing;\n            return;\n        }\n        // create new email node and add it before input\n        var newEmailNode = EmailNode.create(email).div;\n        target.before(newEmailNode);\n        // add email to local list\n        emailList.push(email);\n        // clean un value in input\n        target.value = '';\n    };\n    var _deleteTargetEmail = function (event) {\n        var target = event.target;\n        var emailNode = target.parentElement;\n        // remove email from emailList\n        var email = emailNode.getAttribute('data-email');\n        var emailIndex = emailList.indexOf(email);\n        if (emailIndex >= 0) {\n            emailList.splice(emailIndex, 1);\n        }\n        // remove email node\n        target.parentElement.remove();\n    };\n    var _onKeyUp = function (event) {\n        // keyCode and comparison with numbers are for backward compatibility with IE\n        // noinspection JSDeprecatedSymbols\n        var key = event.key || event.keyCode;\n        if (key === 'Enter' || key === 13 || key === ',' || key === 188) {\n            _dispatchCompleteInput(event.target);\n        }\n    };\n    var _onFocusout = function (event) {\n        _dispatchCompleteInput(event.target);\n    };\n    var _onClick = function (event) {\n        // call custom event only if clicked on cross character in email-node\n        var target = event.target;\n        if (EmailNode.isDeleteButton(target)) {\n            _dispatchDeleteEmailNode(event);\n        }\n    };\n    // this method is not covered with tests cause js-dom does not support ClipboardEvent\n    // so the logic of parsing is moved to utils :: parsePastedText and covered with unit tests\n    var _onPaste = function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        var text = (event.clipboardData || window.clipboardData).getData('text');\n        var parsed = parsePastedText(text);\n        var input = containerNode.lastChild;\n        // if only one email in clipboard then put the value in input\n        if (parsed.length < 2) {\n            parsed[0] && (input.value = parsed[0]);\n            return;\n        }\n        // otherwise add them all immediately\n        // add new emails without re-rendering existing ones\n        parsed.forEach(function (item) {\n            var _a = EmailNode.create(item), div = _a.div, email = _a.email;\n            input.before(div);\n            // add email to local list\n            emailList.push(email);\n        });\n        // const selection = window.getSelection();\n        // if (!selection.rangeCount) return false;\n        // selection.deleteFromDocument();\n        // selection.getRangeAt(0).insertNode(document.createTextNode(paste));\n        //\n        // event.preventDefault();\n    };\n    var _setEventListeners = function () {\n        // keyup -> _onKeyUp -> if (comma|Enter) -> _dispatchCompleteInput -> _convertInputToNode\n        containerNode.addEventListener('keyup', _onKeyUp);\n        // focusout -> _onFocusout -> _dispatchCompleteInput -> _convertInputToNode\n        containerNode.addEventListener('focusout', _onFocusout);\n        containerNode.addEventListener(COMPLETE_INPUT, _convertInputToNode);\n        // click -> _onClick -> check it is a delete element -> _dispatchDeleteEmailNode -> _deleteTargetEmail\n        containerNode.addEventListener('click', _onClick);\n        containerNode.addEventListener(DELETE_EMAIL_NODE, _deleteTargetEmail);\n        // clipboard\n        containerNode.addEventListener('paste', _onPaste, true);\n    };\n    var _validateIncomingEmails = function (emails) {\n        if (!Array.isArray(emails) ||\n            emails.filter(function (email) { return typeof email !== 'string'; })[0]) {\n            throw new Error('EmailsInput : setEmails method expects an array of strings as an argument');\n        }\n    };\n    var _clearChildren = function () {\n        containerNode.innerHTML = '';\n    };\n    var setEmails = function (emails) {\n        _validateIncomingEmails(emails);\n        _clearChildren();\n        emailList = [];\n        emails.forEach(function (email) {\n            var _a = EmailNode.create(email), item = _a.div, finalEmailString = _a.email;\n            containerNode.appendChild(item);\n            // add the same email string (as it is in email node) to emailList\n            emailList.push(finalEmailString);\n        });\n        containerNode\n            .appendChild(InputNode.create())\n            .scrollIntoView();\n    };\n    // call constructor before returning API\n    _constructor();\n    return {\n        getEmails: getEmails,\n        setEmails: setEmails,\n        isEmailValid: validateEmail,\n    };\n}\n// @ts-ignore\nwindow['EmailsInput'] = EmailsInput;\n","var InputNodeFn = function () {\n    var create = function () {\n        // TODO optimise creation with a template to be cloned\n        var input = document.createElement('input');\n        input.placeholder = 'add more people...';\n        input.className = 'email email--state-input';\n        return input;\n    };\n    return {\n        create: create,\n    };\n};\nexport var InputNode = InputNodeFn();\n","export default function main() {\n    if (typeof window.CustomEvent === 'function')\n        return false;\n    function CustomEvent(event, params) {\n        params = params || { bubbles: false, cancelable: false, detail: undefined };\n        var evt = document.createEvent('CustomEvent');\n        evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\n        return evt;\n    }\n    CustomEvent.prototype = window.Event.prototype;\n    // @ts-ignore\n    window.CustomEvent = CustomEvent;\n}\n","var EMAIL_REGEX = /^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\n/**\n * Returns true of email is considered a valid email address\n * @param email String\n * @return boolean\n */\nexport var validateEmail = function (email) {\n    return EMAIL_REGEX.test(email);\n};\nexport var parsePastedText = function (text) {\n    var ary = text.split(',');\n    return ary.reduce(function (acc, next) {\n        var email = next.trim();\n        var angleBrackets = email.match(/<([^>]*)>/);\n        if (angleBrackets && angleBrackets[1]) {\n            email = angleBrackets[1].trim();\n        }\n        if (!!email) {\n            acc.push(email);\n        }\n        return acc;\n    }, []);\n};\n"],"sourceRoot":""}